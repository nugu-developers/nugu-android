/**
 * Copyright (c) 2019 SK Telecom Co., Ltd. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http:www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.skt.nugu.sdk.core.interfaces.message.request

import com.skt.nugu.sdk.core.utils.UUIDGeneration
import com.skt.nugu.sdk.core.interfaces.message.MessageRequest

/**
 * Class for requesting a directive message
 * @param messageId the unique id for the message
 * @param dialogRequestId the id for request that generated by client.
 * @param context the context for the message
 * @param namespace the namespace of directive
 * @param name the name of directive
 * @param version the version
 * @param payload the payload (json formatted string).
 * @param referrerDialogRequestId the referrerDialogRequestId.
 */
data class EventMessageRequest(
    val messageId: String,
    val dialogRequestId: String,
    val context: String,
    val namespace: String,
    val name: String,
    val version: String,
    val payload: String,
    val referrerDialogRequestId: String
) : MessageRequest {

    /**
     * The builder for [EventMessageRequest]
     * @param context the context for the message
     * @param namespace the namespace of directive
     * @param name the name of directive
     * @param version the version
     */
    data class Builder(
        private val context: String,
        private val namespace: String,
        private val name: String,
        private val version: String
    ) {
        private var dialogRequestId: String = UUIDGeneration.timeUUID().toString()
        private var messageId: String = UUIDGeneration.timeUUID().toString()
        private var payload: String = "{}"
        private var referrerDialogRequestId: String = ""

        /**
         * Set dialogRequestId
         * @param id the dialogRequestId to be set
         */
        fun dialogRequestId(id: String) =
            apply { this.dialogRequestId = id }

        /**
         * Set messageId
         * @param id the messageId to be set
         */
        fun messageId(id: String) =
            apply { this.messageId = id }

        /**
         * Set payload
         * @param payload the payload to be set
         */
        fun payload(payload: String) = apply { this.payload = payload }

        /**
         * Set referrerDialogRequestId
         * @param referrerDialogRequestId the referrerDialogRequestId to be set
         */
        fun referrerDialogRequestId(referrerDialogRequestId: String) =
            apply { this.referrerDialogRequestId = referrerDialogRequestId }

        /**
         * Create a EventMessageRequest applied given params.
         */
        fun build(): EventMessageRequest =
            EventMessageRequest(
                messageId,
                dialogRequestId,
                context,
                namespace,
                name,
                version,
                payload,
                referrerDialogRequestId
            )
    }
}