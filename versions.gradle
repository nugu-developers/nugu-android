def getVersionNameFromCode(code) {
    Integer major = code / 10000
    Integer minor = (code % 10000) / 100
    Integer patch = code % 100

    return "$major.$minor.$patch"
}

ext {
    compileSdkVersion = 33
    minSdkVersion = 19
    targetSdkVersion = 33

    // 3rd
    androidMaterialVersion = "1.9.0"
    androidXAppcompatVersion = "1.6.1"
    glideVersion = "4.12.0"
    gsonVersion = "2.9.0"
    okhttp3Version = "4.9.3"
    androidXBrowserVersion = "1.5.0"
    koinVersion = "2.2.3"
    kotlinxCoroutinesAndroidVersion = "1.6.4"
    exoPlayerVersion = "2.16.1"
    lottiVersion = "6.0.0"
    jsonVersion = "20220320"
    javaxAnnotationApiVersion = "1.2"
    androidXCompose = "1.4.3"

    // test
    junitVersion = "4.13.2"
    testJunitKtxVersion = "1.1.5"
    testCoreKtxVersion = "1.5.0"
    mokitoCoreVersion = "3.8.0"
    mokitoInlineVersion = "3.8.0"
    mokitoKotlinVersion = "3.1.0"
    androidXJunitVersion = "1.1.5"
    androidXEspressoCoreVersion = "3.5.1"
    robolectricVersion = "4.3.1"

    // SDK
    keensenseVersion = "0.3.0"
    jademarbleVersion = "0.2.7"
    silvertrayVersion = "4.4.1"

    baseNuguVersionCode = 10711
    baseNuguVersionName = "1.7.11"

    if (rootProject.publishSnapshot) {
        // type current timestamp
        // timestamp='yyyyMMdd.HHmm'
        // ex) timestamp='20210128.1643'

        // for CI
        timestamp = System.getenv('SNAPSHOT_TIMESTAMP')

        // snapshot version is higher than current version.
        nuguVersionCode = baseNuguVersionCode + 1
        nuguVersionName = "${getVersionNameFromCode(nuguVersionCode)}-${timestamp}-SNAPSHOT"
    } else {
        nuguVersionCode = baseNuguVersionCode
        nuguVersionName = getVersionNameFromCode(nuguVersionCode)
    }
}
