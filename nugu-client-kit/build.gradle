apply plugin: 'java-library'
apply plugin: 'kotlin'
apply plugin: 'com.google.protobuf'

compileJava.options.encoding = "UTF-8"

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

sourceSets {
    generated {
        java {
            srcDirs "${buildDir}/generated/source/proto/main/grpc"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    if (isReleaseMode) {
        api "com.skt.nugu.sdk:nugu-interface:$version"
        api "com.skt.nugu.sdk:nugu-agent:$version"
        implementation "com.skt.nugu.sdk:nugu-core:$version"
    } else {
        api project(':nugu-interface')
        api project(':nugu-agent')
        implementation project(':nugu-core')
    }

    implementation("io.grpc:grpc-protobuf-lite:${grpc_version}")
    implementation("io.grpc:grpc-stub:${grpc_version}")
    implementation("io.grpc:grpc-okhttp:${grpc_version}")
    implementation("com.squareup.okhttp3:okhttp:$okhttp3Version")
    implementation("com.google.code.gson:gson:$gsonVersion")
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53' // necessary for Java 9+

    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mokitoCoreVersion"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mokitoKotlinVersion"
}

protobuf {
    def useAppleSilicon = false

    if(useAppleSilicon) {
        protoc { artifact = "com.google.protobuf:protoc:$protoc_version:osx-x86_64" }
        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:$grpc_version:osx-x86_64"
                // CURRENT_GRPC_VERSION
            }
        }
    } else {
        protoc { artifact = "com.google.protobuf:protoc:$protoc_version" }
        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:$grpc_version"
                // CURRENT_GRPC_VERSION
            }
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { option 'lite' }
            }
            task.plugins {
                grpc { // Options added to --grpc_out
                    option 'lite' }
            }
        }
    }
}

apply from: '../javadoc.gradle'
apply from: '../publish.gradle'
apply from: '../jacocoJavaLib.gradle'